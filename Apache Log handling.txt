{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import findspark\n",
    "findspark.init()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyspark import SparkConf, SparkContext\n",
    "from pyspark.sql import SparkSession, functions as F"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyspark.sql.functions import split, udf, col, regexp_replace, concat_ws, regexp_extract\n",
    "from pyspark.sql.types import StringType, IntegerType, DateType, TimestampType\n",
    "from datetime import datetime\n",
    "from pyspark.sql.functions import udf, to_timestamp\n",
    "import re"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "spark = (SparkSession\\\n",
    "    .builder \\\n",
    "    .appName('Logs') \\\n",
    "    .getOrCreate())\n",
    "\n",
    "sc = spark.sparkContext"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "root\n",
      " |-- value: string (nullable = true)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "base_df = spark.read.text(\"Z:\\Datasets\\Linux_2k.log\")\n",
    "base_df.printSchema()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+----------------------------------------------------------------------------------------------------------------------------------------------------------------+\n",
      "|value                                                                                                                                                           |\n",
      "+----------------------------------------------------------------------------------------------------------------------------------------------------------------+\n",
      "|Jun 14 15:16:01 combo sshd(pam_unix)[19939]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=218.188.2.4                                |\n",
      "|Jun 14 15:16:02 combo sshd(pam_unix)[19937]: check pass; user unknown                                                                                           |\n",
      "|Jun 14 15:16:02 combo sshd(pam_unix)[19937]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=218.188.2.4                                |\n",
      "|Jun 15 02:04:59 combo sshd(pam_unix)[20882]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root|\n",
      "|Jun 15 02:04:59 combo sshd(pam_unix)[20884]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root|\n",
      "+----------------------------------------------------------------------------------------------------------------------------------------------------------------+\n",
      "only showing top 5 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "base_df.show(5, truncate=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pyspark.sql.dataframe.DataFrame"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(base_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2000, 1)\n"
     ]
    }
   ],
   "source": [
    "print((base_df.count(), len(base_df.columns)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Jun 14 15:16:01 combo sshd(pam_unix)[19939]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=218.188.2.4 ',\n",
       " 'Jun 14 15:16:02 combo sshd(pam_unix)[19937]: check pass; user unknown',\n",
       " 'Jun 14 15:16:02 combo sshd(pam_unix)[19937]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=218.188.2.4 ',\n",
       " 'Jun 15 02:04:59 combo sshd(pam_unix)[20882]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n",
       " 'Jun 15 02:04:59 combo sshd(pam_unix)[20884]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n",
       " 'Jun 15 02:04:59 combo sshd(pam_unix)[20883]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n",
       " 'Jun 15 02:04:59 combo sshd(pam_unix)[20885]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n",
       " 'Jun 15 02:04:59 combo sshd(pam_unix)[20886]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n",
       " 'Jun 15 02:04:59 combo sshd(pam_unix)[20892]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n",
       " 'Jun 15 02:04:59 combo sshd(pam_unix)[20893]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root']"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sample_logs = [item['value'] for item in base_df.take(10)]\n",
    "\n",
    "sample_logs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#to extract timestamp\n",
    "\n",
    "time_pattern = r\"(.*?)\\b\\d{2}:\\d{2}:\\d{2}\\b\"\n",
    "\n",
    "timestamp = [re.search(time_pattern, item).group(1)\n",
    "             if re.search(time_pattern, item)\n",
    "             else 'no match'\n",
    "              for item in sample_logs ]\n",
    "\n",
    "def extract_timestamp(entry):\n",
    "    time_pattern = r'(\\b\\d{2}:\\d{2}:\\d{2}\\b)'\n",
    "    match = re.search(time_pattern, entry)\n",
    "    return match.group(1) if match else 'no match'\n",
    "\n",
    "#create a UDF \n",
    "extract_timestamp_UDF = udf(extract_timestamp, StringType())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+----------------------------------------------------------------------------------------------------------------------------------------------------------------+---------+\n",
      "|value                                                                                                                                                           |date time|\n",
      "+----------------------------------------------------------------------------------------------------------------------------------------------------------------+---------+\n",
      "|Jun 14 15:16:01 combo sshd(pam_unix)[19939]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=218.188.2.4                                |15:16:01 |\n",
      "|Jun 14 15:16:02 combo sshd(pam_unix)[19937]: check pass; user unknown                                                                                           |15:16:02 |\n",
      "|Jun 14 15:16:02 combo sshd(pam_unix)[19937]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=218.188.2.4                                |15:16:02 |\n",
      "|Jun 15 02:04:59 combo sshd(pam_unix)[20882]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root|02:04:59 |\n",
      "|Jun 15 02:04:59 combo sshd(pam_unix)[20884]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root|02:04:59 |\n",
      "+----------------------------------------------------------------------------------------------------------------------------------------------------------------+---------+\n",
      "only showing top 5 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "base_df = base_df.withColumn(\"date time\", extract_timestamp_UDF('value'))\n",
    "\n",
    "base_df.show(5 ,truncate=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "base_df = base_df.drop('date time')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "root\n",
      " |-- value: string (nullable = true)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "base_df.printSchema()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# This for taking the date also \n",
    "def extract_date(sub_string):\n",
    "    return sub_string.split('combo')[0]\n",
    "def date_time(string, word=\"combo\"):\n",
    "    pattern = rf'^(.*?)(?=\\b{re.escape(word)})'\n",
    "\n",
    "    result = re.search(pattern, string)\n",
    "\n",
    "    if result:\n",
    "        extracted_text = result.group(1)\n",
    "        return extracted_text\n",
    "    else:\n",
    "        return None\n",
    "\n",
    "extract_date_UDF = udf(extract_date, StringType()) \n",
    "\n",
    "\n",
    "base_df = base_df.withColumn('Date time', extract_date_UDF('value'))    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------------+----------------+\n",
      "|               value|       Date time|\n",
      "+--------------------+----------------+\n",
      "|Jun 14 15:16:01 c...|Jun 14 15:16:01 |\n",
      "|Jun 14 15:16:02 c...|Jun 14 15:16:02 |\n",
      "|Jun 14 15:16:02 c...|Jun 14 15:16:02 |\n",
      "|Jun 15 02:04:59 c...|Jun 15 02:04:59 |\n",
      "|Jun 15 02:04:59 c...|Jun 15 02:04:59 |\n",
      "+--------------------+----------------+\n",
      "only showing top 5 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "base_df = base_df.drop('Message')\n",
    "\n",
    "base_df.show(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+----------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------+-------------------------+\n",
      "|value                                                                                                                                                           |Date time       |Message                  |\n",
      "+----------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------+-------------------------+\n",
      "|Jun 14 15:16:01 combo sshd(pam_unix)[19939]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=218.188.2.4                                |Jun 14 15:16:01 |[ authentication failure]|\n",
      "|Jun 14 15:16:02 combo sshd(pam_unix)[19937]: check pass; user unknown                                                                                           |Jun 14 15:16:02 |[ check pass]            |\n",
      "|Jun 14 15:16:02 combo sshd(pam_unix)[19937]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=218.188.2.4                                |Jun 14 15:16:02 |[ authentication failure]|\n",
      "|Jun 15 02:04:59 combo sshd(pam_unix)[20882]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root|Jun 15 02:04:59 |[ authentication failure]|\n",
      "|Jun 15 02:04:59 combo sshd(pam_unix)[20884]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root|Jun 15 02:04:59 |[ authentication failure]|\n",
      "+----------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------+-------------------------+\n",
      "only showing top 5 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from pyspark.sql.functions import udf, to_timestamp\n",
    "from pyspark.sql.types import ArrayType, StringType\n",
    "import re\n",
    "\n",
    "# Define the error_extract function\n",
    "def error_extract(sub_string):\n",
    "    pattern = r'(?<=]:)(.*?)(?=;)'\n",
    "    matches = re.findall(pattern, sub_string)\n",
    "    return matches\n",
    "\n",
    "# Register the error_extract function as a UDF\n",
    "extract_error_UDF = udf(error_extract, ArrayType(StringType()))\n",
    "\n",
    "# Apply the UDF to the DataFrame column\n",
    "base_df = base_df.withColumn('Message', extract_error_UDF('value'))\n",
    "\n",
    "# Show the DataFrame\n",
    "base_df.show(5, truncate=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------------+----------------+--------------------+--------------------+\n",
      "|               value|       Date time|             Message|           User Info|\n",
      "+--------------------+----------------+--------------------+--------------------+\n",
      "|Jun 14 15:16:01 c...|Jun 14 15:16:01 |[ authentication ...|[ logname= uid=0 ...|\n",
      "|Jun 14 15:16:02 c...|Jun 14 15:16:02 |       [ check pass]|     [ user unknown]|\n",
      "|Jun 14 15:16:02 c...|Jun 14 15:16:02 |[ authentication ...|[ logname= uid=0 ...|\n",
      "|Jun 15 02:04:59 c...|Jun 15 02:04:59 |[ authentication ...|[ logname= uid=0 ...|\n",
      "|Jun 15 02:04:59 c...|Jun 15 02:04:59 |[ authentication ...|[ logname= uid=0 ...|\n",
      "+--------------------+----------------+--------------------+--------------------+\n",
      "only showing top 5 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "pattern = r'(?<=;)(.*)'\n",
    "\n",
    "# Extract everything after the first occurrence of ;\n",
    "\n",
    "\n",
    "def error_user(sub_string):\n",
    "    pattern = r'(?<=;)(.*)'\n",
    "    matches = re.findall(pattern, sub_string)\n",
    "    return matches\n",
    "\n",
    "# Register the error_extract function as a UDF\n",
    "extract_user_UDF = udf(error_user, ArrayType(StringType()))\n",
    "\n",
    "base_df = base_df.withColumn('User Info', extract_user_UDF('value'))\n",
    "\n",
    "base_df.show(5, truncate=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "root\n",
      " |-- value: string (nullable = true)\n",
      " |-- Date time: string (nullable = true)\n",
      " |-- Message: array (nullable = true)\n",
      " |    |-- element: string (containsNull = true)\n",
      " |-- User Info: array (nullable = true)\n",
      " |    |-- element: string (containsNull = true)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#check the schema \n",
    "base_df.printSchema()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DataFrame[value: string, Date time: string, Message: array<string>, User Info: array<string>]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "base_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = base_df.withColumn('timestamp', to_timestamp(\"Date time\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "#there were unwanted '[]' in our data this code is for removing them\n",
    "base_df = base_df.withColumn('Message', concat_ws('','Message'))\n",
    "\n",
    "base_df = base_df.withColumn('Message', regexp_replace('Message', '\\[|\\]', ''))\n",
    "\n",
    "base_df = base_df.withColumn('User Info', concat_ws('','User Info'))\n",
    "\n",
    "base_df = base_df.withColumn('User Info', regexp_replace('User Info', '\\[|\\]', ''))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+---------------------------------------------------------------------------------------------------------------------------------+----------------+-----------------------+-------------------------------------------------------------+\n",
      "|value                                                                                                                            |Date time       |Message                |User Info                                                    |\n",
      "+---------------------------------------------------------------------------------------------------------------------------------+----------------+-----------------------+-------------------------------------------------------------+\n",
      "|Jun 14 15:16:01 combo sshd(pam_unix)[19939]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=218.188.2.4 |Jun 14 15:16:01 | authentication failure| logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=218.188.2.4 |\n",
      "|Jun 14 15:16:02 combo sshd(pam_unix)[19937]: check pass; user unknown                                                            |Jun 14 15:16:02 | check pass            | user unknown                                                |\n",
      "|Jun 14 15:16:02 combo sshd(pam_unix)[19937]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=218.188.2.4 |Jun 14 15:16:02 | authentication failure| logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=218.188.2.4 |\n",
      "+---------------------------------------------------------------------------------------------------------------------------------+----------------+-----------------------+-------------------------------------------------------------+\n",
      "only showing top 3 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "base_df.show(3, truncate=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "base_df = base_df.withColumn('Date', regexp_extract('Date time', '^\\w{3} \\d{2}', 0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+---------------------------------------------------------------------------------------------------------------------------------+----------------+-----------------------+-------------------------------------------------------------+------+--------+\n",
      "|value                                                                                                                            |Date time       |Message                |User Info                                                    |Date  |Time    |\n",
      "+---------------------------------------------------------------------------------------------------------------------------------+----------------+-----------------------+-------------------------------------------------------------+------+--------+\n",
      "|Jun 14 15:16:01 combo sshd(pam_unix)[19939]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=218.188.2.4 |Jun 14 15:16:01 | authentication failure| logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=218.188.2.4 |Jun 14|15:16:01|\n",
      "|Jun 14 15:16:02 combo sshd(pam_unix)[19937]: check pass; user unknown                                                            |Jun 14 15:16:02 | check pass            | user unknown                                                |Jun 14|15:16:02|\n",
      "|Jun 14 15:16:02 combo sshd(pam_unix)[19937]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=218.188.2.4 |Jun 14 15:16:02 | authentication failure| logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=218.188.2.4 |Jun 14|15:16:02|\n",
      "+---------------------------------------------------------------------------------------------------------------------------------+----------------+-----------------------+-------------------------------------------------------------+------+--------+\n",
      "only showing top 3 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#regular expression to get the time  \n",
    "base_df = base_df.withColumn('Time', regexp_extract('Date time', '\\d{2}:\\d{2}:\\d{2}', 0))\n",
    "base_df.show(3, truncate=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---------------------------------------Pandas Below ------------------------------------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "result_pdf = base_df.select(\"*\").toPandas()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2000 entries, 0 to 1999\n",
      "Data columns (total 5 columns):\n",
      " #   Column     Non-Null Count  Dtype \n",
      "---  ------     --------------  ----- \n",
      " 0   value      2000 non-null   object\n",
      " 1   Date time  2000 non-null   object\n",
      " 2   Message    2000 non-null   object\n",
      " 3   User Info  2000 non-null   object\n",
      " 4   Date       2000 non-null   object\n",
      "dtypes: object(5)\n",
      "memory usage: 78.3+ KB\n"
     ]
    }
   ],
   "source": [
    "result_pdf.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below are some visualizations for getting an insight of our data,\n",
    "\n",
    "As this data is lacking a decent number of values, I have not decided to go with a null value approach to handle null enteries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(data=result_pdf, x='Message')\n",
    "plt.xlabel('Message Type')\n",
    "plt.ylabel('Count')\n",
    "plt.title('Count of Message Types')\n",
    "plt.xticks(rotation=45)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot a boxplot of 'value' grouped by 'Message'\n",
    "sns.boxplot(data=result_pdf, x='Message', y='value')\n",
    "plt.xlabel('Message Type')\n",
    "plt.ylabel('Value')\n",
    "plt.title('Distribution of Value by Message Type')\n",
    "plt.xticks(rotation=45)\n",
    "plt.gca().set_yticklabels([])\n",
    "plt.gca().set_xticklabels([])\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot a boxplot of 'value' grouped by 'Message'\n",
    "sns.boxplot(data=result_pdf, x='User Info', y='value')\n",
    "plt.xlabel('User Info')\n",
    "plt.ylabel('Value')\n",
    "plt.title('Distribution of Value by Message Type')\n",
    "plt.xticks(rotation=45)\n",
    "plt.gca().set_yticklabels([])\n",
    "plt.gca().set_xticklabels([])\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>Date time</th>\n",
       "      <th>Message</th>\n",
       "      <th>User Info</th>\n",
       "      <th>Date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Jun 14 15:16:01 combo sshd(pam_unix)[19939]: a...</td>\n",
       "      <td>Jun 14 15:16:01</td>\n",
       "      <td>authentication failure</td>\n",
       "      <td>logname= uid=0 euid=0 tty=NODEVssh ruser= rho...</td>\n",
       "      <td>Jun 14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Jun 14 15:16:02 combo sshd(pam_unix)[19937]: c...</td>\n",
       "      <td>Jun 14 15:16:02</td>\n",
       "      <td>check pass</td>\n",
       "      <td>user unknown</td>\n",
       "      <td>Jun 14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jun 14 15:16:02 combo sshd(pam_unix)[19937]: a...</td>\n",
       "      <td>Jun 14 15:16:02</td>\n",
       "      <td>authentication failure</td>\n",
       "      <td>logname= uid=0 euid=0 tty=NODEVssh ruser= rho...</td>\n",
       "      <td>Jun 14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Jun 15 02:04:59 combo sshd(pam_unix)[20882]: a...</td>\n",
       "      <td>Jun 15 02:04:59</td>\n",
       "      <td>authentication failure</td>\n",
       "      <td>logname= uid=0 euid=0 tty=NODEVssh ruser= rho...</td>\n",
       "      <td>Jun 15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Jun 15 02:04:59 combo sshd(pam_unix)[20884]: a...</td>\n",
       "      <td>Jun 15 02:04:59</td>\n",
       "      <td>authentication failure</td>\n",
       "      <td>logname= uid=0 euid=0 tty=NODEVssh ruser= rho...</td>\n",
       "      <td>Jun 15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                               value         Date time  \\\n",
       "0  Jun 14 15:16:01 combo sshd(pam_unix)[19939]: a...  Jun 14 15:16:01    \n",
       "1  Jun 14 15:16:02 combo sshd(pam_unix)[19937]: c...  Jun 14 15:16:02    \n",
       "2  Jun 14 15:16:02 combo sshd(pam_unix)[19937]: a...  Jun 14 15:16:02    \n",
       "3  Jun 15 02:04:59 combo sshd(pam_unix)[20882]: a...  Jun 15 02:04:59    \n",
       "4  Jun 15 02:04:59 combo sshd(pam_unix)[20884]: a...  Jun 15 02:04:59    \n",
       "\n",
       "                   Message                                          User Info  \\\n",
       "0   authentication failure   logname= uid=0 euid=0 tty=NODEVssh ruser= rho...   \n",
       "1               check pass                                       user unknown   \n",
       "2   authentication failure   logname= uid=0 euid=0 tty=NODEVssh ruser= rho...   \n",
       "3   authentication failure   logname= uid=0 euid=0 tty=NODEVssh ruser= rho...   \n",
       "4   authentication failure   logname= uid=0 euid=0 tty=NODEVssh ruser= rho...   \n",
       "\n",
       "     Date  \n",
       "0  Jun 14  \n",
       "1  Jun 14  \n",
       "2  Jun 14  \n",
       "3  Jun 15  \n",
       "4  Jun 15  "
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result_pdf.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([' authentication failure', ' check pass', ''], dtype=object)"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result_pdf['Message'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Jun 14', 'Jun 15', 'Jun 16', 'Jun 17', 'Jun 18', 'Jun 19',\n",
       "       'Jun 20', 'Jun 21', 'Jun 22', 'Jun 23', 'Jun 24', 'Jun 25',\n",
       "       'Jun 26', 'Jun 27', 'Jun 28', 'Jun 29', 'Jun 30', '', 'Jul 10',\n",
       "       'Jul 11', 'Jul 12', 'Jul 13', 'Jul 14', 'Jul 15', 'Jul 16',\n",
       "       'Jul 17', 'Jul 18', 'Jul 19', 'Jul 20', 'Jul 21', 'Jul 22',\n",
       "       'Jul 23', 'Jul 24', 'Jul 25', 'Jul 26', 'Jul 27'], dtype=object)"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result_pdf['Date'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.8"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
